using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Client.UserInterface.Controls;
using static Robust.Client.UserInterface.Controls.LineEdit;

namespace Content.Client._FarHorizons.UI.HandheldRadio
{
    [GenerateTypedNameReferences]
    public sealed partial class HandheldRadioWindow : FancyWindow
    {

        public event Action<float>? OnChangeFrequency;
        public event Action<bool>? OnMicrophoneToggled;
        public event Action<bool>? OnSpeakerToggled;

        private bool _focused;

        private float _freq_min = 0.0f;
        private float _freq_max = 0.0f;
        private float _frequency = 0.0f;

        public HandheldRadioWindow()
        {
            RobustXamlLoader.Load(this);

        }

        public void Populate(float freq, float freq_min, float freq_max, bool mic, bool speaker){
            _frequency = freq;
            _freq_min = freq_min;
            _freq_max = freq_max;

            FrequencyEdit.Text = freq.ToString("0.0");
            FrequencyEdit.ToolTip = Loc.GetString("handheld-radio-ui-frequency-tooltip", ("min", freq_min.ToString("0.0")), ("max", freq_max.ToString("0.0")));
            FrequencyEdit.IsValid = s => float.TryParse(s, out float _);
            FrequencyEdit.OnTextEntered += OnFrequencyEntered;
            FrequencyEdit.OnTabComplete += OnFrequencyEntered;
            FrequencyEdit.OnFocusExit += OnFrequencyEntered;
            ToggleMic.Pressed = mic;
            ToggleSpeaker.Pressed = speaker;
            ToggleMic.OnToggled += e => OnMicrophoneToggled?.Invoke(e.Pressed);
            ToggleSpeaker.OnToggled += e => OnSpeakerToggled?.Invoke(e.Pressed);
        }

        private void OnFrequencyEntered(LineEditEventArgs args){
            if (float.TryParse(args.Text, out float _freq)) {
                _frequency = (float)Math.Round(_freq, 1);

                if (_frequency < _freq_min)
                    _frequency = (float)Math.Round(_freq_min, 1);
                if (_frequency > _freq_max)
                    _frequency = (float)Math.Round(_freq_max, 1);

                OnChangeFrequency?.Invoke(_frequency);
            } else {
                _frequency = (float)Math.Round(_freq_min, 1);
            }

            FrequencyEdit.Text = _frequency.ToString("0.0");
        }
    }
}
