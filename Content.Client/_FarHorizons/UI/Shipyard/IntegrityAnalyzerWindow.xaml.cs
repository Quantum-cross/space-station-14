using System.Linq;
using System.Numerics;
using Content.Client.Message;
using Content.Shared.Atmos;
using Content.Client.UserInterface.Controls;
using Content.Shared.Alert;
using Content.Shared.Damage;
using Content.Shared.Damage.Prototypes;
using Content.Shared.FixedPoint;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.IdentityManagement;
using Content.Shared.Inventory;
using Content.Shared.MedicalScanner;
using Content.Shared.Mobs;
using Content.Shared.Mobs.Components;
using Content.Shared.Mobs.Systems;
using Content.Shared.Nutrition.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Content.Shared.FarHorizons.Tools.Shipyard;

namespace Content.Client._FarHorizons.UI.Shipyard
{
    [GenerateTypedNameReferences]
    public sealed partial class IntegrityAnalyzerWindow : FancyWindow
    {
        private readonly IEntityManager _entityManager;
        private readonly SpriteSystem _spriteSystem;
        private readonly IPrototypeManager _prototypes;
        private readonly IResourceCache _cache;

        public IntegrityAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);

            var dependencies = IoCManager.Instance!;
            _entityManager = dependencies.Resolve<IEntityManager>();
            _spriteSystem = _entityManager.System<SpriteSystem>();
            _prototypes = dependencies.Resolve<IPrototypeManager>();
            _cache = dependencies.Resolve<IResourceCache>();
        }

        public void Populate(IntegrityAnalyzerScannedTargetMessage msg)
        {
            var target = _entityManager.GetEntity(msg.TargetEntity);

            if (target == null
                || !_entityManager.TryGetComponent<DamageableComponent>(target, out var damageable))
            {
                NoTargetDataText.Visible = true;
                return;
            }

            NoTargetDataText.Visible = false;

            // Scan Mode

            ScanModeLabel.Text = msg.ScanMode.HasValue
                ? msg.ScanMode.Value
                    ? Loc.GetString("integrity-analyzer-window-scan-mode-active")
                    : Loc.GetString("integrity-analyzer-window-scan-mode-inactive")
                : Loc.GetString("integrity-analyzer-window-entity-unknown-text");

            ScanModeLabel.FontColorOverride = msg.ScanMode.HasValue && msg.ScanMode.Value ? Color.Green : Color.Red;

            // Target Information

            SpriteView.SetEntity(target.Value);
            SpriteView.Visible = msg.ScanMode.HasValue && msg.ScanMode.Value;
            NoDataTex.Visible = !SpriteView.Visible;

            var name = new FormattedMessage();
            name.PushColor(Color.White);
            name.AddText(_entityManager.HasComponent<MetaDataComponent>(target.Value)
                ? Identity.Name(target.Value, _entityManager)
                : Loc.GetString("integrity-analyzer-window-entity-unknown-text"));
            NameLabel.SetMessage(name);

            // Total Damage

            DamageLabel.Text = damageable.TotalDamage.ToString();

            // Damage Groups

            var damageSortedGroups = damageable.Damage.DamageDict.OrderByDescending(damage => damage.Value).ToDictionary(damage => damage.Key, damage => damage.Value);

            IReadOnlyDictionary<string, FixedPoint2> damagePerType = damageable.Damage.DamageDict;

            DrawDiagnosticGroups(damageSortedGroups, damagePerType);
        }

        private void DrawDiagnosticGroups(
            Dictionary<string, FixedPoint2> groups,
            IReadOnlyDictionary<string, FixedPoint2> damageDict)
        {
            GroupsContainer.RemoveAllChildren();

            foreach (var (damage, damageAmount) in groups)
            {
                if (damageAmount == 0)
                    continue;

                var groupTitleText = $"{Loc.GetString(
                    "integrity-analyzer-window-damage-text",
                    ("damage", damage),
                    ("amount", damageAmount)
                )}";

                var groupContainer = new BoxContainer
                {
                    Align = BoxContainer.AlignMode.Begin,
                    Orientation = BoxContainer.LayoutOrientation.Vertical,
                };

                groupContainer.AddChild(CreateDiagnosticDamage(groupTitleText));

                GroupsContainer.AddChild(groupContainer);

            }
        }

        private static Label CreateDiagnosticItemLabel(string text)
        {
            return new Label
            {
                Text = text,
            };
        }

        private BoxContainer CreateDiagnosticDamage(string text)
        {
            var rootContainer = new BoxContainer
            {
                Margin = new Thickness(0, 6, 0, 0),
                VerticalAlignment = VAlignment.Bottom,
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
            };

            rootContainer.AddChild(CreateDiagnosticItemLabel(text));

            return rootContainer;
        }
    }
}
