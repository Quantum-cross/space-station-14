using System.Linq;
using System.Numerics;
using Content.Client.Humanoid;
using Content.Client.Stylesheets;
using Content.Shared.Clothing;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI;

/// <summary>
/// Holds character data on the side of the setup GUI.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class CharacterPickerButton : ContainerButton
{
    private IEntityManager _entManager;

    private EntityUid _previewDummy;

    /// <summary>
    /// Invoked if we should delete the attached character
    /// </summary>
    public event Action? OnDeletePressed;

    /// <summary>
    /// Invoked if we should enable or disable the attached character
    /// </summary>
    public event Action<bool>? OnEnableToggled;

    /// <summary>
    /// Create a new character picker button
    /// </summary>
    /// <param name="entityManager"></param>
    /// <param name="prototypeManager"></param>
    /// <param name="group">Button group to join</param>
    /// <param name="profile">Profile this button is attached to</param>
    /// <param name="isSelected">If true, start in pressed state</param>
    /// <param name="simple">If true, don't show enable or delete button (used for late join gui)</param>
    public CharacterPickerButton(
        IEntityManager entityManager,
        IPrototypeManager prototypeManager,
        ButtonGroup group,
        ICharacterProfile profile,
        bool isSelected,
        bool simple = false)
    {
        RobustXamlLoader.Load(this);
        _entManager = entityManager;
        AddStyleClass(StyleClassButton);
        ToggleMode = true;
        Group = group;
        var description = profile.Name;

        if (profile is not HumanoidCharacterProfile humanoid)
        {
            _previewDummy = entityManager.SpawnEntity(prototypeManager.Index<SpeciesPrototype>(SharedHumanoidAppearanceSystem.DefaultSpecies).DollPrototype, MapCoordinates.Nullspace);
        }
        else
        {
            var uiController = UserInterfaceManager.GetUIController<LobbyUIController>();
            var job = uiController.GetPreferredJob(humanoid);
            _previewDummy = uiController.LoadProfileEntity(humanoid, job, true);

            if (job != prototypeManager.Index<JobPrototype>(SharedGameTicker.FallbackOverflowJob))
            {
                var jobName = job.LocalizedName;
                description = $"{description}\n{jobName}";
            }

            EnabledCheck.Pressed = humanoid.Enabled;
        }

        Pressed = isSelected;

        View.SetEntity(_previewDummy);
        DescriptionLabel.Text = description;

        // Set up the StyleBoxTextures for the outlines...
        foreach (var panel in new List<PanelContainer>
                     { EnabledCheckOutline, DeleteButtonOutline, ConfirmDeleteButtonOutline })
        {
            if (panel.PanelOverride is not StyleBoxTexture stylebox)
                continue;
            stylebox.Texture = Theme.ResolveTexture("/Textures/Interface/Nano/slider_outline.svg.96dpi.png");
            stylebox.SetPatchMargin(StyleBox.Margin.All, 12);
            stylebox.SetContentMarginOverride(StyleBox.Margin.All, 0);
            stylebox.SetExpandMargin(StyleBox.Margin.All, 1);
            stylebox.TextureScale = new Vector2(1.1f);
            stylebox.Modulate = StyleNano.PanelDark;
        }

        if (simple)
        {
            DeleteButtonOutline.Visible = false;
            EnabledCheckOutline.Visible = false;
        }
        else
        {
            DeleteButtonOutline.Visible = !isSelected;
            ConfirmDeleteButton.OnPressed += _ =>
            {
                Parent?.RemoveChild(this);
                Parent?.RemoveChild(ConfirmDeleteButton);
                OnDeletePressed?.Invoke();
            };

            DeleteButton.OnPressed += _ =>
            {
                DeleteButtonOutline.Visible = false;
                ConfirmDeleteButtonOutline.Visible = true;
            };

            EnabledCheck.OnToggled += args =>
            {
                OnEnableToggled?.Invoke(args.Pressed);
            };
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (!disposing)
            return;

        _entManager.DeleteEntity(_previewDummy);
        _previewDummy = default;
    }
}
