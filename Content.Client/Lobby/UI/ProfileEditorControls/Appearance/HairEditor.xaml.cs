using System.Linq;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI.ProfileEditorControls.Appearance;

[GenerateTypedNameReferences]
public sealed partial class HairEditor : BoxContainer
{

    private ProfileEditor? _editor;
    private MarkingManager _markingManager = default!;
    private IPrototypeManager _prototypeManager = default!;
    public event Action? OnUpdate;
    public event Action<Marking?>? OnChangeCMarkingsHair;
    public event Action<Marking?>? OnChangeCMarkingsFacialHair;

    public HairEditor()
    {
        RobustXamlLoader.Load(this);
        HairStylePicker.OnMarkingSelect = HandleHairStyleChange;
        HairStylePicker.OnColorChanged = HandleHairColorChange;
        HairStylePicker.OnSlotRemove = HandleHairRemove;
        HairStylePicker.OnSlotAdd = HandleHairAdd;
        FacialHairPicker.OnMarkingSelect = HandleFacialHairStyleChange;
        FacialHairPicker.OnColorChanged = HandleFacialHairColorChange;
        FacialHairPicker.OnSlotRemove = HandleFacialHairRemove;
        FacialHairPicker.OnSlotAdd = HandleFacialHairAdd;
    }

    public void Initialize(ProfileEditor profileEditor, MarkingManager markMan, IPrototypeManager protoMan)
    {
        _editor = profileEditor;
        _markingManager = markMan;
        _prototypeManager = protoMan;
        if (_editor.Profile is not HumanoidCharacterProfile)
        {
            Visible = false;
            return;
        }

        Visible = true;
        Refresh();
        UpdateCMarkingsHair();
        UpdateCMarkingsFacialHair();
    }

    public void Refresh()
    {
        UpdateHairPickers();
    }

    private void HandleHairStyleChange((int slot, string id) newStyle)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;
        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithHairStyleName(newStyle.id));
        OnUpdate?.Invoke();
    }

    private void HandleFacialHairStyleChange((int slot, string id) newStyle)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;
        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithFacialHairStyleName(newStyle.id));
        OnUpdate?.Invoke();
    }

    private void HandleHairColorChange((int slot, Marking marking) newColor)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;
        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithHairColor(newColor.marking.MarkingColors[0]));
        UpdateCMarkingsHair();
        OnUpdate?.Invoke();
    }

    private void HandleFacialHairColorChange((int slot, Marking marking) newColor)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;
        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithFacialHairColor(newColor.marking.MarkingColors[0]));
        UpdateCMarkingsFacialHair();
        OnUpdate?.Invoke();
    }

    private void HandleHairRemove(int obj)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;
        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithHairStyleName(HairStyles.DefaultHairStyle));
        UpdateHairPickers();
        UpdateCMarkingsHair();
        OnUpdate?.Invoke();
    }

    private void HandleFacialHairRemove(int obj)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;
        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithFacialHairStyleName(HairStyles.DefaultFacialHairStyle));
        UpdateHairPickers();
        UpdateCMarkingsHair();
        OnUpdate?.Invoke();
    }

    private void HandleHairAdd()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.Hair, humanoid.Species)
            .Keys.FirstOrDefault();

        if (string.IsNullOrEmpty(hair))
            return;

        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithHairStyleName(hair));

        UpdateHairPickers();
        UpdateCMarkingsHair();
        OnUpdate?.Invoke();
    }

    private void HandleFacialHairAdd()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.FacialHair, humanoid.Species)
            .Keys.FirstOrDefault();

        if (string.IsNullOrEmpty(hair))
            return;

        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithFacialHairStyleName(hair));

        UpdateHairPickers();
        UpdateCMarkingsHair();
        OnUpdate?.Invoke();
    }

    private void UpdateHairPickers()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        var hairMarking = humanoid.Appearance.HairStyleId switch
        {
            HairStyles.DefaultHairStyle => new List<Marking>(),
            _ => new() { new(humanoid.Appearance.HairStyleId, new List<Color>() { humanoid.Appearance.HairColor }) },
        };

        var facialHairMarking = humanoid.Appearance.FacialHairStyleId switch
        {
            HairStyles.DefaultFacialHairStyle => new List<Marking>(),
            _ => new() { new(humanoid.Appearance.FacialHairStyleId, new List<Color>() { humanoid.Appearance.FacialHairColor }) },
        };

        HairStylePicker.UpdateData(
            hairMarking,
            humanoid.Species,
            1);
        FacialHairPicker.UpdateData(
            facialHairMarking,
            humanoid.Species,
            1);
    }

    private void UpdateCMarkingsHair()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        // hair color
        Color? hairColor = null;
        if ( humanoid.Appearance.HairStyleId != HairStyles.DefaultHairStyle &&
            _markingManager.Markings.TryGetValue(humanoid.Appearance.HairStyleId, out var hairProto)
        )
        {
            if (_markingManager.CanBeApplied(humanoid.Species, humanoid.Sex, hairProto, _prototypeManager))
            {
                if (_markingManager.MustMatchSkin(humanoid.Species, HumanoidVisualLayers.Hair, out var _, _prototypeManager))
                {
                    hairColor = humanoid.Appearance.SkinColor;
                }
                else
                {
                    hairColor = humanoid.Appearance.HairColor;
                }
            }
        }

        Marking? newMarking = null;
        if(hairColor.HasValue)
            newMarking = new Marking(humanoid.Appearance.HairStyleId, new List<Color> {hairColor.Value});
        OnChangeCMarkingsHair?.Invoke(newMarking);
    }

    private void UpdateCMarkingsFacialHair()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        // facial hair color
        Color? facialHairColor = null;
        if ( humanoid.Appearance.FacialHairStyleId != HairStyles.DefaultFacialHairStyle &&
            _markingManager.Markings.TryGetValue(humanoid.Appearance.FacialHairStyleId, out var facialHairProto))
        {
            if (_markingManager.CanBeApplied(humanoid.Species, humanoid.Sex, facialHairProto, _prototypeManager))
            {
                if (_markingManager.MustMatchSkin(humanoid.Species, HumanoidVisualLayers.Hair, out var _, _prototypeManager))
                {
                    facialHairColor = humanoid.Appearance.SkinColor;
                }
                else
                {
                    facialHairColor = humanoid.Appearance.FacialHairColor;
                }
            }
        }
        Marking? newMarking = null;
        if (facialHairColor.HasValue)
            newMarking = new (humanoid.Appearance.FacialHairStyleId, new List<Color> {facialHairColor.Value});
        OnChangeCMarkingsFacialHair?.Invoke(newMarking);
    }
}
