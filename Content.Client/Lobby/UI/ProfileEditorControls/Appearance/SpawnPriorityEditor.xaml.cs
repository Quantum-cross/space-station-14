using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Lobby.UI.ProfileEditorControls.Appearance;

[GenerateTypedNameReferences]
public sealed partial class SpawnPriorityEditor : BoxContainer
{
    private ProfileEditor? _editor;
    public event Action? OnUpdate;

    public SpawnPriorityEditor()
    {
        RobustXamlLoader.Load(this);
        foreach (var value in Enum.GetValues<SpawnPriorityPreference>())
        {
            SpawnPriorityButton.AddItem(Loc.GetString($"humanoid-profile-editor-preference-spawn-priority-{value.ToString().ToLower()}"), (int) value);
        }
        SpawnPriorityButton.OnItemSelected += HandleItemSelected;
    }

    public void Initialize(ProfileEditor editor)
    {
        _editor = editor;
        if (_editor?.Profile is not (HumanoidCharacterProfile or BorgCharacterProfile))
        {
            Visible = false;
        }

        Visible = true;
        Refresh();
    }

    public void Refresh()
    {
        SpawnPriorityButton.SelectId(_editor?.Profile switch
        {
            HumanoidCharacterProfile humanoid => (int)humanoid.SpawnPriority,
            BorgCharacterProfile borg => (int)borg.SpawnPriority,
            _ => SpawnPriorityButton.SelectedId,
        });

    }

    private void HandleItemSelected(OptionButton.ItemSelectedEventArgs obj)
    {
        SpawnPriorityButton.SelectId(obj.Id);
        SetSpawnPriority((SpawnPriorityPreference)obj.Id);
    }

    private void SetSpawnPriority(SpawnPriorityPreference newSpawnPriority)
    {
        if (_editor?.Profile is not null)
        {
            _editor.Profile = _editor.Profile switch
            {
                HumanoidCharacterProfile humanoid => humanoid.WithSpawnPriorityPreference(newSpawnPriority),
                BorgCharacterProfile borg => borg.WithSpawnPriorityPreference(newSpawnPriority),
                _ => _editor.Profile,
            };
        }

        OnUpdate?.Invoke();
    }
}
