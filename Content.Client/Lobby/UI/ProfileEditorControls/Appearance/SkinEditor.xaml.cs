using Content.Shared.Humanoid;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI.ProfileEditorControls.Appearance;

[GenerateTypedNameReferences]
public sealed partial class SkinEditor : BoxContainer
{
    private ProfileEditor? _editor;
    private IPrototypeManager _prototypeManager = default!;
    public event Action? OnUpdate;
    public event Action<Color>? OnUpdateSkinColor;

    public SkinEditor()
    {
        RobustXamlLoader.Load(this);
        ColorPicker.OnColorChanged += HandleColorChanged;
        Skin.OnValueChanged += HandleValueChanged;
    }

    public void Initialize(ProfileEditor profileEditor, IPrototypeManager protoMan)
    {
        _editor = profileEditor;
        _prototypeManager = protoMan;
        if (_editor.Profile is not HumanoidCharacterProfile)
        {
            Visible = false;
            return;
        }

        Visible = true;
        Refresh();
    }

    public void Refresh()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        UpdatePickerVisibility();

        ColorPicker.Color = SetValidatedTone(humanoid.Appearance.SkinColor);
        Skin.Value = SkinColor.HumanSkinToneFromColor(humanoid.Appearance.SkinColor);
    }

    private void UpdatePickerVisibility()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        var skin = _prototypeManager.Index(humanoid.Species).SkinColoration;
        Skin.Visible = skin == HumanoidSkinColor.HumanToned;
        RgbSkinColorContainer.Visible = skin != HumanoidSkinColor.HumanToned;
    }

    private void HandleValueChanged(Robust.Client.UserInterface.Controls.Range e)
    {
        SetHumanTone(e);
    }

    private void HandleColorChanged(Color color)
    {
        SetValidatedTone(color);
    }

    private void SetHumanTone(Robust.Client.UserInterface.Controls.Range range)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        if (_prototypeManager.Index(humanoid.Species).SkinColoration != HumanoidSkinColor.HumanToned)
            return;

        SetSkinColor(SkinColor.HumanSkinTone((int) range.Value));
    }

    private Color SetValidatedTone(Color color)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return color;

        Color? newColor = _prototypeManager.Index(humanoid.Species).SkinColoration switch
        {
            HumanoidSkinColor.Hues => color,
            HumanoidSkinColor.TintedHues => SkinColor.TintedHues(color),
            HumanoidSkinColor.VoxFeathers => SkinColor.ClosestVoxColor(color),
            HumanoidSkinColor.HumanToned => SkinColor.HumanSkinTone((int)SkinColor.HumanSkinToneFromColor(color)),
            _ => null,
        };

        if (!newColor.HasValue)
            return color;

        SetSkinColor(newColor.Value);
        return newColor.Value;
    }

    private void SetSkinColor(Color newColor)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        _editor.Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithSkinColor(newColor));
        OnUpdateSkinColor?.Invoke(newColor);
        OnUpdate?.Invoke();
    }
}
