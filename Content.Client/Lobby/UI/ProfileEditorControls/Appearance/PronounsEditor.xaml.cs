using Content.Shared.Humanoid;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;

namespace Content.Client.Lobby.UI.ProfileEditorControls.Appearance;

[GenerateTypedNameReferences]
public sealed partial class PronounsEditor : BoxContainer
{

    private ProfileEditor? _editor;
    public event Action? OnUpdate;

    public PronounsEditor()
    {
        RobustXamlLoader.Load(this);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-male-text"), (int) Gender.Male);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-female-text"), (int) Gender.Female);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-epicene-text"), (int) Gender.Epicene);
        PronounsButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-neuter-text"), (int) Gender.Neuter);
        PronounsButton.OnItemSelected += HandleSelected;
    }

    public void Initialize(ProfileEditor profileEditor)
    {
        _editor = profileEditor;
        if (_editor.Profile is not HumanoidCharacterProfile)
        {
            Visible = false;
            return;
        }

        Visible = true;
        Refresh();
    }

    public void Refresh()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        PronounsButton.SelectId((int)humanoid.Gender);
    }

    private void HandleSelected(OptionButton.ItemSelectedEventArgs e)
    {
        PronounsButton.SelectId(e.Id);
        SetGender((Gender) e.Id);
    }

    private void SetGender(Gender newGender)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        _editor.Profile = humanoid.WithGender(newGender);
        OnUpdate?.Invoke();
    }

    public void SetFromSex(Sex newSex)
    {
        switch (newSex)
        {
            case Sex.Male:
                SetGender(Gender.Male);
                break;
            case Sex.Female:
                SetGender(Gender.Female);
                break;
            case Sex.Unsexed:
            default:
                SetGender(Gender.Epicene);
                break;
        }
    }
}
