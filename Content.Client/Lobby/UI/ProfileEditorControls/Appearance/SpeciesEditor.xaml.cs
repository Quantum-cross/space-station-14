using System.Linq;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.Guidebook;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI.ProfileEditorControls.Appearance;

[GenerateTypedNameReferences]
public sealed partial class SpeciesEditor : BoxContainer
{

    private ProfileEditor? _editor;
    private readonly List<SpeciesPrototype> _species = new();
    private IPrototypeManager _prototypeManager = default!;
    public event Action? OnUpdate;
    public event Action<ProtoId<SpeciesPrototype>>? OnUpdateSpecies;

    [ValidatePrototypeId<GuideEntryPrototype>]
    private const string DefaultSpeciesGuidebook = "Species";

    public SpeciesEditor()
    {
        RobustXamlLoader.Load(this);
        SpeciesButton.OnItemSelected += HandleSelected;
        SpeciesInfoButton.OnPressed += OnSpeciesInfoButtonPressed;
    }

    public void Initialize(ProfileEditor profileEditor, IPrototypeManager protoMan)
    {
        _editor = profileEditor;
        _prototypeManager = protoMan;
        if (_editor.Profile is not HumanoidCharacterProfile)
        {
            Visible = false;
            return;
        }

        Visible = true;
        Refresh();
    }

    public void Refresh()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        SpeciesButton.Clear();
        _species.Clear();

        _species.AddRange(_prototypeManager.EnumeratePrototypes<SpeciesPrototype>().Where(o => o.RoundStart));
        var speciesIds = _species.Select(o => o.ID).ToList();

        for (var idx = 0; idx < _species.Count; idx++)
        {
            var name = Loc.GetString(_species[idx].Name);
            SpeciesButton.AddItem(name, idx);

            if (humanoid.Species.Equals(_species[idx].ID) == true)
            {
                SpeciesButton.SelectId(idx);
            }
        }

        // If our species isn't available then reset it to default.
        if (!speciesIds.Contains(humanoid.Species))
        {
            SetSpecies(SharedHumanoidAppearanceSystem.DefaultSpecies);
        }
    }

    private void HandleSelected(OptionButton.ItemSelectedEventArgs e)
    {
        SpeciesButton.SelectId(e.Id);
        SetSpecies(_species[e.Id].ID);
    }

    private void SetSpecies(string newSpecies)
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;
        _editor.Profile = humanoid.WithSpecies(newSpecies);
        OnUpdate?.Invoke();
        OnUpdateSpecies?.Invoke(newSpecies);
        UpdateSpeciesGuidebookIcon();
    }

    private void OnSpeciesInfoButtonPressed(BaseButton.ButtonEventArgs args)
    {
        // TODO GUIDEBOOK
        // make the species guide book a field on the species prototype.
        // I.e., do what jobs/antags do.

        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        var guidebookController = UserInterfaceManager.GetUIController<GuidebookUIController>();
        var page = DefaultSpeciesGuidebook;
        if (_prototypeManager.HasIndex<GuideEntryPrototype>(humanoid.Species))
            page = humanoid.Species;

        if (!_prototypeManager.TryIndex<GuideEntryPrototype>(DefaultSpeciesGuidebook, out var guideRoot))
            return;

        var dict = new Dictionary<ProtoId<GuideEntryPrototype>, GuideEntry>();
        dict.Add(DefaultSpeciesGuidebook, guideRoot);
        //TODO: Don't close the guidebook if its already open, just go to the correct page
        guidebookController.OpenGuidebook(dict, includeChildren:true, selected: page);
    }

    private void UpdateSpeciesGuidebookIcon()
    {
        if (_editor?.Profile is not HumanoidCharacterProfile humanoid)
            return;

        SpeciesInfoButton.StyleClasses.Clear();

        if (!_prototypeManager.HasIndex(humanoid.Species))
            return;

        // Don't display the info button if no guide entry is found
        if (!_prototypeManager.HasIndex<GuideEntryPrototype>(humanoid.Species))
            return;

        const string style = "SpeciesInfoDefault";
        SpeciesInfoButton.StyleClasses.Add(style);
    }
}
