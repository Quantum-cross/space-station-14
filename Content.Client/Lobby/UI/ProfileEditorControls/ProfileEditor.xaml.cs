using System.IO;
using System.Linq;
using Content.Client.Humanoid;
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Sprite;
using Content.Shared.CCVar;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.ContentPack;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Lobby.UI.ProfileEditorControls
{
    [GenerateTypedNameReferences]
    public sealed partial class ProfileEditor : BoxContainer
    {
        private readonly IClientPreferencesManager _preferencesManager;
        private readonly IConfigurationManager _cfgManager;
        private readonly IEntityManager _entManager;
        private readonly IFileDialogManager _dialogManager;
        private readonly IPlayerManager _playerManager;
        private readonly IPrototypeManager _prototypeManager;
        private readonly MarkingManager _markingManager;
        private readonly JobRequirementsManager _requirements;

        private FlavorText.FlavorText? _flavorText;
        private TextEdit? _flavorTextEdit;

        private bool _exporting;

        /// <summary>
        /// If we're attempting to save.
        /// </summary>
        public event Action? Save;

        /// <summary>
        /// Entity used for the profile editor preview
        /// </summary>
        public EntityUid PreviewDummy;

        /// <summary>
        /// The character slot for the current profile.
        /// </summary>
        public int? CharacterSlot;

        /// <summary>
        /// The work in progress profile being edited.
        /// </summary>
        public ICharacterProfile? Profile;

        /// <summary>
        /// The last saved profile, should match the server's copy, used for dirty state and "reset"
        /// </summary>
        private ICharacterProfile? _savedProfile;

        private bool _isDirty;

        private readonly ISawmill _sawmill;

        public ProfilePreview PreviewPanel => Preview;
        public AppearanceTab Appearance => _appearanceTab;
        public MarkingPicker Markings => _markingPicker;
        public JobList Jobs => _jobList;
        public AntagList Antags => _antagList;
        public TraitsList Traits => _traitsList;

        public ProfileEditor(
            IClientPreferencesManager preferencesManager,
            IConfigurationManager configurationManager,
            IEntityManager entManager,
            IFileDialogManager dialogManager,
            ILogManager logManager,
            IPlayerManager playerManager,
            IPrototypeManager prototypeManager,
            IResourceManager resManager,
            JobRequirementsManager requirements,
            MarkingManager markings)
        {
            RobustXamlLoader.Load(this);
            _sawmill = logManager.GetSawmill("profile.editor");
            _cfgManager = configurationManager;
            _entManager = entManager;
            _dialogManager = dialogManager;
            _playerManager = playerManager;
            _prototypeManager = prototypeManager;
            _markingManager = markings;
            _preferencesManager = preferencesManager;
            _requirements = requirements;

            ImportButton.OnPressed += args =>
            {
                ImportProfile();
            };

            ExportButton.OnPressed += args =>
            {
                ExportProfile();
            };

            ExportImageButton.OnPressed += args =>
            {
                PreviewPanel.ExportImage();
            };

            OpenImagesButton.OnPressed += args =>
            {
                resManager.UserData.OpenOsWindow(ContentSpriteSystem.Exports);
            };

            ResetButton.OnPressed += args =>
            {
                ResetToDefault();
            };

            SaveButton.OnPressed += args =>
            {
                Save?.Invoke();
            };

            #region Left

            #region Name
            NameEdit.OnTextChanged += args => SetName(args.Text);
            NameRandomize.OnPressed += _ => RandomizeName();
            RandomizeEverythingButton.OnPressed += _ => RandomizeEverything();
            WarningLabel.SetMarkup($"[color=red]{Loc.GetString("humanoid-profile-editor-naming-rules-warning")}[/color]");
            #endregion Name

            #region Appearance
            _tabContainer.SetTabTitle(0, Loc.GetString("humanoid-profile-editor-appearance-tab"));
            _appearanceTab.Initialize(this, _prototypeManager, _markingManager);
            #endregion Appearance

            #region Jobs
            _tabContainer.SetTabTitle(1, Loc.GetString("humanoid-profile-editor-jobs-tab"));
            _jobList.Initialize(this, _prototypeManager, _entManager, _requirements, _playerManager);
            #endregion Jobs

            #region Antags
            _tabContainer.SetTabTitle(2, Loc.GetString("humanoid-profile-editor-antags-tab"));
            _antagList.Initialize(this,  _prototypeManager, _entManager, _requirements);
            #endregion Antags

            #region Traits
            _tabContainer.SetTabTitle(3, Loc.GetString("humanoid-profile-editor-traits-tab"));
            _traitsList.Initialize(this, _prototypeManager);
            #endregion Traits

            #region Markings
            _tabContainer.SetTabTitle(4, Loc.GetString("humanoid-profile-editor-markings-tab"));
            _markingPicker.OnMarkingAdded += OnMarkingChange;
            _markingPicker.OnMarkingRemoved += OnMarkingChange;
            _markingPicker.OnMarkingColorChange += OnMarkingChange;
            _markingPicker.OnMarkingRankChange += OnMarkingChange;
            #endregion Markings

            // TODO: extract and test flavor text
            RefreshFlavorText();

            #region Dummy
            PreviewPanel.Initialize(this, _entManager, _preferencesManager, _prototypeManager, _playerManager);
            #endregion Dummy

            #endregion Left

            IsDirty = false;
        }

        /// <summary>
        /// Refreshes the flavor text editor status.
        /// </summary>
        public void RefreshFlavorText()
        {
            if (_cfgManager.GetCVar(CCVars.FlavorText))
            {
                if (_flavorText != null)
                    return;

                _flavorText = new FlavorText.FlavorText();
                _tabContainer.AddChild(_flavorText);
                _tabContainer.SetTabTitle(_tabContainer.ChildCount - 1, Loc.GetString("humanoid-profile-editor-flavortext-tab"));
                _flavorTextEdit = _flavorText.CFlavorTextInput;

                _flavorText.OnFlavorTextChanged += OnFlavorTextChange;
            }
            else
            {
                if (_flavorText == null)
                    return;

                _tabContainer.RemoveChild(_flavorText);
                _flavorText.OnFlavorTextChanged -= OnFlavorTextChange;
                _flavorText.Dispose();
                _flavorTextEdit?.Dispose();
                _flavorTextEdit = null;
                _flavorText = null;
            }
        }


        private void OnFlavorTextChange(string content)
        {
            if (Profile is not HumanoidCharacterProfile humanoid)
                return;

            Profile = humanoid.WithFlavorText(content);
            SetDirty();
        }

        public void SetDirty()
        {
            // If it equals default then reset the button.
            if (Profile == null || _savedProfile == null || _savedProfile.MemberwiseEquals(Profile))
            {
                IsDirty = false;
                return;
            }

            // TODO: Check if profile matches default.
            IsDirty = true;
        }

        /// <summary>
        /// Resets the profile to the defaults.
        /// </summary>
        public void ResetToDefault()
        {
            SetProfile(_savedProfile, CharacterSlot);
        }

        /// <summary>
        /// Sets the editor to the specified profile with the specified slot.
        /// </summary>
        public void SetProfile(ICharacterProfile? profile, int? slot)
        {
            Profile = profile?.Clone();
            CharacterSlot = slot;

            UpdateNameEdit();
            UpdateFlavorTextEdit();

            switch (Profile)
            {
                case HumanoidCharacterProfile:
                    _tabContainer.SetTabVisible(0, true);
                    _tabContainer.SetTabVisible(1, true);
                    _tabContainer.SetTabVisible(2, true);
                    _tabContainer.SetTabVisible(3, true);
                    _tabContainer.SetTabVisible(4, true);
                    break;
                case BorgCharacterProfile:
                    _tabContainer.CurrentTab = 0;
                    _tabContainer.SetTabVisible(0, true);
                    _tabContainer.SetTabVisible(1, false);
                    _tabContainer.SetTabVisible(2, false);
                    _tabContainer.SetTabVisible(3, false);
                    _tabContainer.SetTabVisible(4, false);
                    break;
                default:
                    _tabContainer.SetTabVisible(0, false);
                    _tabContainer.SetTabVisible(1, false);
                    _tabContainer.SetTabVisible(2, false);
                    _tabContainer.SetTabVisible(3, false);
                    _tabContainer.SetTabVisible(4, false);
                    break;
            }
            _appearanceTab.Initialize(this, _prototypeManager, _markingManager);
            _antagList.Initialize(this, _prototypeManager, _entManager, _requirements);
            _jobList.Initialize(this,  _prototypeManager, _entManager, _requirements, _playerManager);
            _traitsList.Initialize(this, _prototypeManager);
            _markingPicker.SetProfile(Profile);

            RefreshFlavorText();

            PreviewPanel.ReloadPreview();
            RandomizeEverythingButton.Visible = Profile is HumanoidCharacterProfile;
            SetDirty();
        }

        /// <summary>
        /// Load the profile located at the slot into the profile editor
        /// </summary>
        /// <param name="slot">slot's profile to load</param>
        public void SetProfile(int slot)
        {
            if (_preferencesManager.Preferences == null)
                return;
            if (!_preferencesManager.Preferences.Characters.TryGetValue(slot, out var character))
                return;
            _savedProfile = character.Clone();
            SetProfile(_savedProfile, slot);
        }

        private void OnMarkingChange(MarkingSet markings)
        {
            if (Profile is not HumanoidCharacterProfile humanoid)
                return;

            Profile = humanoid.WithCharacterAppearance(humanoid.Appearance.WithMarkings(markings.GetForwardEnumerator().ToList()));
            PreviewPanel.ReloadProfilePreview();
        }

        protected override void EnteredTree()
        {
            base.EnteredTree();
            PreviewPanel.ReloadPreview();
        }

        protected override void ExitedTree()
        {
            base.ExitedTree();
            _entManager.DeleteEntity(PreviewDummy);
            PreviewDummy = EntityUid.Invalid;
        }

        private void SetName(string newName)
        {
            Profile = Profile?.WithName(newName);
            SetDirty();

            if (!IsDirty)
                return;

            _entManager.System<MetaDataSystem>().SetEntityName(PreviewDummy, newName);
            UpdateNameEdit();
        }

        public bool IsDirty
        {
            get => _isDirty;
            private set
            {
                if (_isDirty == value)
                    return;

                _isDirty = value;
                UpdateSaveButton();
            }
        }

        private void UpdateNameEdit()
        {
            NameEdit.Text = Profile?.Name ?? "";
        }

        private void UpdateFlavorTextEdit()
        {
            if (Profile is not HumanoidCharacterProfile humanoid)
                return;

            if (_flavorTextEdit != null)
            {
                _flavorTextEdit.TextRope = new Rope.Leaf(humanoid.FlavorText ?? "");
            }
        }

        private void UpdateSaveButton()
        {
            var disable = Profile is null || !IsDirty;
            SaveButton.Disabled = disable;
            ResetButton.Disabled = disable;
        }

        private void RandomizeEverything()
        {
            Profile = HumanoidCharacterProfile.Random();
            SetProfile(Profile, CharacterSlot);
            SetDirty();
        }

        private void RandomizeName()
        {
            if (Profile == null)
                return;

            SetName(Profile.GetRandomName());
        }

        private async void ImportProfile()
        {
            if (_exporting || CharacterSlot == null || Profile == null)
                return;

            StartExport();
            await using var file = await _dialogManager.OpenFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

            if (file == null)
            {
                EndExport();
                return;
            }

            try
            {
                var profile = _entManager.System<HumanoidAppearanceSystem>().FromStream(file, _playerManager.LocalSession!);
                var oldProfile = Profile;
                SetProfile(profile, CharacterSlot);

                IsDirty = !profile.MemberwiseEquals(oldProfile);
            }
            catch (Exception exc)
            {
                _sawmill.Error($"Error when importing profile\n{exc.StackTrace}");
            }
            finally
            {
                EndExport();
            }
        }

        private async void ExportProfile()
        {
            if (Profile == null || _exporting || Profile is not HumanoidCharacterProfile humanoid)
                return;

            StartExport();
            var file = await _dialogManager.SaveFile(new FileDialogFilters(new FileDialogFilters.Group("yml")));

            if (file == null)
            {
                EndExport();
                return;
            }

            try
            {
                var dataNode = _entManager.System<HumanoidAppearanceSystem>().ToDataNode(humanoid);
                await using var writer = new StreamWriter(file.Value.fileStream);
                dataNode.Write(writer);
            }
            catch (Exception exc)
            {
                _sawmill.Error($"Error when exporting profile\n{exc.StackTrace}");
            }
            finally
            {
                EndExport();
                await file.Value.fileStream.DisposeAsync();
            }
        }

        private void StartExport()
        {
            _exporting = true;
            ImportButton.Disabled = true;
            ExportButton.Disabled = true;
        }

        private void EndExport()
        {
            _exporting = false;
            ImportButton.Disabled = false;
            ExportButton.Disabled = false;
        }
    }
}
