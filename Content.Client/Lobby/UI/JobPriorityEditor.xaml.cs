using System.Linq;
using System.Numerics;
using Content.Client.Lobby.UI.Roles;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.Clothing;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class JobPriorityEditor : BoxContainer
{
    private readonly IClientPreferencesManager _preferencesManager;
    private readonly IPrototypeManager _prototypeManager;
    private readonly JobRequirementsManager _requirements;

    private readonly Dictionary<string, BoxContainer> _jobCategories = new();
    private readonly List<(string, RequirementsSelector)> _jobPriorities = new();

    public Dictionary<ProtoId<JobPrototype>, JobPriority> SelectedJobPriorities { get; private set; } = new();

    public event Action<Dictionary<ProtoId<JobPrototype>, JobPriority>>? Save;

    public JobPriorityEditor(
        IClientPreferencesManager preferencesManager,
        IPrototypeManager prototypeManager,
        JobRequirementsManager requirements
        )
    {
        _prototypeManager = prototypeManager;
        _requirements = requirements;
        _preferencesManager = preferencesManager;
        RobustXamlLoader.Load(this);

        ResetButton.OnPressed += args =>
        {
            SelectedJobPriorities = _preferencesManager.Preferences?.JobPriorities.ShallowClone() ??  new Dictionary<ProtoId<JobPrototype>, JobPriority>();
            UpdateJobPriorities();
            SetDirty();
        };

        SaveButton.OnPressed += args =>
        {
            Save?.Invoke(SelectedJobPriorities);
            UpdateJobPriorities();
            SetDirty();
        };

        RefreshJobs();
    }


    /// <summary>
    /// Refreshes all job selectors.
    /// </summary>
    public void RefreshJobs()
    {
        JobList.DisposeAllChildren();
        _jobCategories.Clear();
        _jobPriorities.Clear();
        var firstCategory = true;

        // Get all displayed departments
        var departments = new List<DepartmentPrototype>();
        foreach (var department in _prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
        {
            if (department.EditorHidden)
                continue;

            departments.Add(department);
        }

        departments.Sort(DepartmentUIComparer.Instance);

        var items = new[]
        {
            ("humanoid-profile-editor-job-priority-never-button", (int) JobPriority.Never),
            ("humanoid-profile-editor-job-priority-low-button", (int) JobPriority.Low),
            ("humanoid-profile-editor-job-priority-medium-button", (int) JobPriority.Medium),
            ("humanoid-profile-editor-job-priority-high-button", (int) JobPriority.High),
        };

        foreach (var department in departments)
        {
            var departmentName = Loc.GetString(department.Name);

            if (!_jobCategories.TryGetValue(department.ID, out var category))
            {
                category = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    Name = department.ID,
                    ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip",
                        ("departmentName", departmentName))
                };

                if (firstCategory)
                {
                    firstCategory = false;
                }
                else
                {
                    category.AddChild(new Control
                    {
                        MinSize = new Vector2(0, 23),
                    });
                }

                category.AddChild(new PanelContainer
                {
                    PanelOverride = new StyleBoxFlat {BackgroundColor = Color.FromHex("#464966")},
                    Children =
                    {
                        new Label
                        {
                            Text = Loc.GetString("humanoid-profile-editor-department-jobs-label",
                                ("departmentName", departmentName)),
                            Margin = new Thickness(5f, 0, 0, 0)
                        }
                    }
                });

                _jobCategories[department.ID] = category;
                JobList.AddChild(category);
            }

            var jobs = department.Roles.Select(jobId => _prototypeManager.Index(jobId))
                .Where(job => job.SetPreference)
                .ToArray();

            Array.Sort(jobs, JobUIComparer.Instance);

            foreach (var job in jobs)
            {
                var jobContainer = new BoxContainer()
                {
                    Orientation = LayoutOrientation.Horizontal,
                };

                var selector = new RequirementsSelector()
                {
                    Margin = new Thickness(3f, 3f, 3f, 0f),
                };
                // selector.OnOpenGuidebook += OnOpenGuidebook;

                var icon = new TextureRect
                {
                    TextureScale = new Vector2(2, 2),
                    VerticalAlignment = VAlignment.Center
                };
                var jobIcon = _prototypeManager.Index(job.Icon);
                icon.Texture = jobIcon.Icon.Frame0();
                selector.Setup(items, job.LocalizedName, 200, job.LocalizedDescription, icon, job.Guides);

                // This shouldn't depend on any character specific properties, so pass null
                if (!_requirements.IsAllowed(job, null, out var reason))
                {
                    selector.LockRequirements(reason);
                }
                else
                {
                    selector.UnlockRequirements();
                }

                selector.OnSelected += selectedPrio =>
                {
                    var selectedJobPrio = (JobPriority) selectedPrio;

                    SelectedJobPriorities[job.ID] = selectedJobPrio;

                    foreach (var (jobId, other) in _jobPriorities)
                    {
                        // Sync other selectors with the same job in case of multiple department jobs
                        if (jobId == job.ID)
                        {
                            other.Select(selectedPrio);
                            continue;
                        }

                        if (selectedJobPrio != JobPriority.High || (JobPriority) other.Selected != JobPriority.High)
                            continue;

                        // Lower any other high priorities to medium.
                        other.Select((int)JobPriority.Medium);
                        SelectedJobPriorities[jobId] = JobPriority.Medium;
                    }

                    // TODO: Only reload on high change (either to or from).
                    // ReloadPreview();

                    UpdateJobPriorities();
                    SetDirty();
                };

                _jobPriorities.Add((job.ID, selector));
                jobContainer.AddChild(selector);
                // jobContainer.AddChild(loadoutWindowBtn);
                category.AddChild(jobContainer);
            }
        }

        UpdateJobPriorities();
        SetDirty();
    }

    /// <summary>
    /// Updates selected job priorities to the profile's.
    /// </summary>
    private void UpdateJobPriorities()
    {
        foreach (var (jobId, prioritySelector) in _jobPriorities)
        {
            prioritySelector.Select((int) SelectedJobPriorities.GetValueOrDefault(jobId, JobPriority.Never));
        }
    }

    private void SetDirty()
    {
        // If it equals default then reset the button.
        var savedJobPriorities = _preferencesManager.Preferences?.JobPriorities ?? new Dictionary<ProtoId<JobPrototype>, JobPriority>();
        if (!SelectedJobPriorities.Keys.ToHashSet().SetEquals(savedJobPriorities.Keys.ToHashSet()))
        {
            IsDirty = true;
            return;
        }

        foreach (var (job, prio) in SelectedJobPriorities)
        {
            if (prio != savedJobPriorities.GetValueOrDefault(job))
            {
                IsDirty = true;
                return;
            }
        }

        IsDirty = false;
    }

    private bool _isDirty;

    public bool IsDirty
    {
        get => _isDirty;
        set
        {
            if (_isDirty == value)
                return;

            _isDirty = value;
            UpdateSaveButton();
        }
    }

    private void UpdateSaveButton()
    {
        SaveButton.Disabled = !IsDirty;
        ResetButton.Disabled = !IsDirty;
    }

    public void LoadJobPriorities()
    {
        SelectedJobPriorities = _preferencesManager.Preferences?.JobPriorities.ShallowClone() ??  new Dictionary<ProtoId<JobPrototype>, JobPriority>();
        UpdateJobPriorities();
        SetDirty();
    }

    public void LoadJobPriorities(Dictionary<ProtoId<JobPrototype>,JobPriority>? jobPriorities)
    {
        SelectedJobPriorities = jobPriorities?.ShallowClone() ?? new Dictionary<ProtoId<JobPrototype>, JobPriority>();
        UpdateJobPriorities();
        SetDirty();
    }
}

