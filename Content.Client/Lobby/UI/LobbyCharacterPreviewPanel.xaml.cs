using System.Numerics;
using Content.Client.Lobby.UI.ProfileEditorControls;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class LobbyCharacterPreviewPanel : Control
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IClientPreferencesManager _preferences = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly JobRequirementsManager _requirements = default!;
    [Dependency] private readonly ISharedPlayerManager _playerManager = default!;
    [Dependency] private readonly IUserInterfaceManager _uiManager = default!;

    private SpriteSystem _sprite = default!;

    public Button CharacterSetupButton => CharacterSetup;

    private EntityUid? _previewDummy;

    public LobbyCharacterPreviewPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetLoaded(bool value)
    {
        Loaded.Visible = value;
        Unloaded.Visible = !value;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _entManager.DeleteEntity(_previewDummy);
        _previewDummy = null;
    }

    /// <summary>
    /// Refresh the selected character summary
    /// </summary>
    public void Refresh()
    {
        var iconContainers = new List<Container>()
        {
            NeverBox,
            LowBox,
            MediumBox,
            HighBox,
        };

        foreach(var iconContainer in iconContainers)
        {
            iconContainer.DisposeAllChildren();
        }

        if(_preferences.Preferences is not {} prefs)
            return;

        _sprite = _entManager.System<SpriteSystem>();

        var priorities = prefs.JobPriorities;

        foreach (var job in _prototypeManager.EnumeratePrototypes<JobPrototype>())
        {
            if (!job.SetPreference)
                continue;
            if (!_requirements.IsAllowed(job, null, out _))
                continue;

            var prio = priorities.GetValueOrDefault(job, JobPriority.Never);

            var atLeastOneEnabled = prefs.GetAllEnabledProfilesForJob(job).Count != 0;
            var icon = new TextureRect
            {
                TextureScale = new Vector2(prio == JobPriority.High ? 8 : 3),
                VerticalAlignment = VAlignment.Center,
                HorizontalAlignment = HAlignment.Center,
                TooltipSupplier = _ => CreateJobTooltip(job),
                MouseFilter = MouseFilterMode.Pass,
            };
            if(!atLeastOneEnabled)
                icon.Modulate = Color.LightSalmon;

            var jobIcon = _prototypeManager.Index(job.Icon);
            icon.Texture = _sprite.Frame0(jobIcon.Icon);

            iconContainers[(int)prio].AddChild(icon);
        }
    }

    private Tooltip? CreateJobTooltip(JobPrototype job)
    {
        if(_preferences.Preferences is not {} prefs)
            return null;

        var tooltip = new Tooltip();

        var content = tooltip.GetChild(0);
        content.RemoveAllChildren();

        var grid = new GridContainer()
        {
            MaxGridHeight = _uiManager.PopupRoot.Height * 0.99f,
            Margin = new Thickness(6),
        };

        content.AddChild(grid);

        var profiles = prefs.GetAllProfilesForJob(job);

        if (profiles.Count == 0)
        {
            var label = new Label
            {
                Text = Loc.GetString("lobby-character-preview-panel-tooltip-no-profiles-for-job",
                    ("job", job.LocalizedName)),
                Align = Label.AlignMode.Center,
            };
            grid.AddChild(label);
            return tooltip;
        }

        foreach (var profile in profiles.Values)
        {
            var profilePreview = new ProfilePreviewSpriteView()
            {
                SetSize = new Vector2(64),
                Scale = new Vector2(2),
                HorizontalAlignment = HAlignment.Right,
            };
            if(!profile.Enabled)
                profilePreview.Modulate = Color.Red;
            profilePreview.Initialize(_preferences, _prototypeManager, _entManager, _playerManager);
            profilePreview.LoadPreview(profile, job);

            var name = profile.Name;
            if(!profile.Enabled)
                name += $"\n{Loc.GetString("character-setup-gui-character-picker-button-disabled-button")}";
            else if (profilePreview.JobName != null)
                name += $"\n{profilePreview.JobName}";

            var label = new Label
            {
                Text = name,
                Align = Label.AlignMode.Right,
                HorizontalAlignment = HAlignment.Right,
                HorizontalExpand = true,
                Margin = new Thickness(0, 0, 10, 0),
            };

            var profileContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
            };
            profileContainer.AddChild(label);
            profileContainer.AddChild(profilePreview);

            grid.AddChild(profileContainer);
        }

        return tooltip;
    }
}
