using System.Numerics;
using Content.Client.UserInterface.Controls;
using Prometheus;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class LobbyCharacterPreviewPanel : Control
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IClientPreferencesManager _preferences = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public Button CharacterSetupButton => CharacterSetup;

    private EntityUid? _previewDummy;

    public LobbyCharacterPreviewPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetLoaded(bool value)
    {
        Loaded.Visible = value;
        Unloaded.Visible = !value;
    }

    // public void SetSummaryText(string value)
    // {
    //     Summary.Text = value;
    // }

    // public void SetSprite(EntityUid uid)
    // {
    //     if (_previewDummy != null)
    //     {
    //         _entManager.DeleteEntity(_previewDummy);
    //     }
    //
    //     _previewDummy = uid;
    //
    //     ViewBox.DisposeAllChildren();
    //     var spriteView = new SpriteView
    //     {
    //         OverrideDirection = Direction.South,
    //         Scale = new Vector2(4f, 4f),
    //         MaxSize = new Vector2(112, 112),
    //         Stretch = SpriteView.StretchMode.Fill,
    //     };
    //     spriteView.SetEntity(uid);
    //     ViewBox.AddChild(spriteView);
    // }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _entManager.DeleteEntity(_previewDummy);
        _previewDummy = null;
    }

    public void Refresh()
    {
        JobList.DisposeAllChildren();
        var prefs = _preferences.Preferences!;
        foreach (var (job, priority) in prefs.JobPrioritiesFiltered())
        {
            var jobProfiles = prefs.GetAllProfilesForJob(job);
            var summary = Loc.GetString("lobby-character-preview-panel-selected-character-summary",
                ("count", jobProfiles.Count),
                ("job", _prototypeManager.Index(job).LocalizedName));

            var line = new BoxContainer();
            line.Orientation = BoxContainer.LayoutOrientation.Horizontal;
            line.HorizontalExpand = true;

            var label = new Label();
            label.Text = summary;
            line.AddChild(label);

            label = new Label();
            label.Text = priority.ToString();
            label.HorizontalExpand = true;
            label.HorizontalAlignment = HAlignment.Right;
            line.AddChild(label);
            JobList.AddChild(line);
        }
    }
}
