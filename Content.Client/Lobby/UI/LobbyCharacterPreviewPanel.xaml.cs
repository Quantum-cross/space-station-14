using System.Linq;
using System.Numerics;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class LobbyCharacterPreviewPanel : Control
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IClientPreferencesManager _preferences = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    private SpriteSystem _sprite = default!;

    public Button CharacterSetupButton => CharacterSetup;

    private EntityUid? _previewDummy;

    public LobbyCharacterPreviewPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetLoaded(bool value)
    {
        Loaded.Visible = value;
        Unloaded.Visible = !value;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _entManager.DeleteEntity(_previewDummy);
        _previewDummy = null;
    }

    /// <summary>
    /// Refresh the selected character summary
    /// </summary>
    public void Refresh()
    {
        JobGrid.DisposeAllChildren();
        if(_preferences.Preferences is not {} prefs)
            return;

        _sprite = _entManager.System<SpriteSystem>();

        var containers = Enum.GetValues<JobPriority>().Select(p => new GridContainer(){Columns = 6}).ToList();

        foreach (var container in containers)
        {
            JobGrid.AddChild(container);
        }

        var priorities = prefs.JobPriorities;

        foreach (var job in _prototypeManager.EnumeratePrototypes<JobPrototype>())
        {
            if (!job.SetPreference)
                continue;
            var prio = priorities.GetValueOrDefault(job, JobPriority.Never);

            var icon = new TextureRect
            {
                TextureScale = new Vector2(2, 2),
                VerticalAlignment = VAlignment.Center,
            };
            var jobIcon = _prototypeManager.Index(job.Icon);
            icon.Texture = _sprite.Frame0(jobIcon.Icon);

            containers[(int)prio].AddChild(icon);
        }
    }
    // public void Refresh()
    // {
    //     JobList.DisposeAllChildren();
    //     var prefs = _preferences.Preferences!;
    //     foreach (var (job, priority) in prefs.JobPrioritiesFiltered())
    //     {
    //         var jobProfiles = prefs.GetAllProfilesForJob(job);
    //         var summary = Loc.GetString("lobby-character-preview-panel-selected-character-summary",
    //             ("count", jobProfiles.Count),
    //             ("job", _prototypeManager.Index(job).LocalizedName));
    //
    //         var line = new BoxContainer();
    //         line.Orientation = BoxContainer.LayoutOrientation.Horizontal;
    //         line.HorizontalExpand = true;
    //
    //         var label = new Label();
    //         label.Text = summary;
    //         line.AddChild(label);
    //
    //         label = new Label();
    //         label.Text = priority.ToString();
    //         label.HorizontalExpand = true;
    //         label.HorizontalAlignment = HAlignment.Right;
    //         line.AddChild(label);
    //         JobList.AddChild(line);
    //     }
    // }
}
